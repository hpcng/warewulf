package overlay_test

import (
	"fmt"
	"path"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	warewulfconf "github.com/warewulf/warewulf/internal/pkg/config"
	"github.com/warewulf/warewulf/internal/pkg/node"
	"github.com/warewulf/warewulf/internal/pkg/overlay"

	"github.com/warewulf/warewulf/internal/pkg/testenv"
)

const output = `# This file is autogenerated by warewulf
# Source: test.ww

allow booting;
allow bootp;
ddns-update-style interim;
authoritative;

option space ipxe;

# Tell iPXE to not wait for ProxyDHCP requests to speed up boot.
option ipxe.no-pxedhcp code 176 = unsigned integer 8;
option ipxe.no-pxedhcp 1;

option space PXE;
option PXE.mtftp-ip    code 1 = ip-address;
option PXE.mtftp-cport code 2 = unsigned integer 16;
option PXE.mtftp-sport code 3 = unsigned integer 16;
option PXE.mtftp-tmout code 4 = unsigned integer 8;
option PXE.mtftp-delay code 5 = unsigned integer 8;

option architecture-type   code 93  = unsigned integer 16;
if exists user-class and option user-class = "iPXE" {
    filename "http://10.10.10.250:9983/ipxe/${mac:hexhyp}?assetkey=${asset}&uuid=${uuid}";
} else {

    if option architecture-type = 00:00 {
        filename "/warewulf/undionly.kpxe";
    }
    if option architecture-type = 00:07 {
        filename "/warewulf/ipxe-x86_64.efi";
    }
    if option architecture-type = 00:09 {
        filename "/warewulf/ipxe-x86_64.efi";
    }
    if option architecture-type = 00:0B {
        filename "/warewulf/snp-arm64.efi";
    }
}

subnet 10.10.10.0 netmask 255.255.255.0 {
    max-lease-time 120;
    range 10.10.10.2 10.10.10.22;
    next-server 10.10.10.250;
}
`

const wwconf = `WW_INTERNAL: 45
ipaddr: 10.10.10.250
netmask: 255.255.255.0
network: 10.10.10.0
warewulf:
  grubboot: false
dhcp:
  enabled: true
  template: default
  range start: 10.10.10.2
  range end: 10.10.10.22
tftp:
  ipxe:
    00:0B: snp-arm64.efi
    "00:00": undionly.kpxe
    "00:07": ipxe-x86_64.efi
    "00:09": ipxe-x86_64.efi
`
const nodesconf = `WW_INTERNAL: 45
nodeprofiles: {}
nodes:
  n01: {}
`

func Test_run(t *testing.T) {
	env := testenv.NewWithConf(t, wwconf)
	env.WriteFile(t, "etc/warewulf/nodes.conf", nodesconf)

	conf := warewulfconf.Get()
	env.ImportFile(t, path.Join("var/lib/warewulf/overlays/test/test.ww"), "dhcpd.conf.ww")
	nodeDB, err := node.New()
	assert.NoError(t, err)
	nodes, err := nodeDB.FindAllNodes()
	assert.NoError(t, err)
	filteredNodes := node.FilterByName(nodes, []string{"n01"})
	tstruct := overlay.InitStruct(&filteredNodes[0])
	tstruct.BuildSource = "test.ww"
	buffer, backupFile, writeFile, err := overlay.RenderTemplateFile(path.Join(conf.Paths.WWOverlaydir, "test/test.ww"), tstruct)
	assert.NoError(t, err)
	assert.True(t, backupFile)
	assert.True(t, writeFile)
	// have a nice output for cpy&pst
	if !strings.EqualFold(buffer.String(), output) {
		fmt.Print(buffer.String())
	}
	assert.Equal(t, output, buffer.String())
}
